import json
import pathlib
import git
import re


path = pathlib.Path("cvelist")


def cvss_shortener(cvss):
    if "CVSS" in cvss:
        split_cvss = cvss.split("CVSS")
        return str("CVSS" + split_cvss[1])
    else:
        return cvss


def parse_json():
    for f in path.rglob("*/*.json"):
        with open(f, encoding="utf8", errors='ignore') as f:

            data = json.load(f)

            for k in data.keys():
                if k == "CVE_data_meta":
                    print(f'CVE ID: {data["CVE_data_meta"]["ID"]}')

                elif k == "description":
                    print(f'CVE DESCRIPTION: {data["description"]["description_data"][0]["value"]}')

                elif k == "impact":
                    if data[k] is not None:
                        if "cvss" in data[k]:
                            if type(data[k]["cvss"]) == dict:
                                if data[k]["cvss"].get("vectorString") is not None:
                                    print(cvss_shortener(str(data[k]["cvss"]["vectorString"])))
                            elif type(data[k]["cvss"]) == list:
                                for l in data[k]["cvss"]:
                                    if type(l) == dict:
                                        if data[k]["cvss"][0]["vectorString"] is not None:
                                            print(cvss_shortener(str(data[k]["cvss"][0]["vectorString"])))
                                    elif type(l) == list:
                                        print(cvss_shortener(str(data[k]["cvss"][0][0]["vectorString"])))
                            else:
                                continue
                        else:
                            continue
                    else:
                        continue

                elif k == "affects":
                    print(f'VENDOR: {data["affects"]["vendor"]["vendor_data"][0]["vendor_name"]}')
                    print(f'PRODUCT: {data["affects"]["vendor"]["vendor_data"][0]["product"]["product_data"][0]["product_name"]}')

                else:
                    continue

class CveOrg:

    def __init__(self):
        pass

    def download(self):
        pass

    def update(self):
        pull_repo = git.Repo('/Users/macbookpro/PycharmProjects/mts-cve-parser/cvelist')
        project_repo = git.Repo('/Users/macbookpro/PycharmProjects/mts-cve-parser')
        o = pull_repo.remotes.origin

        o.pull()
        project_repo.git.add(all=True)
        project_repo.index.commit("Commit with GitPython")

        diff_result = project_repo.git.diff("--submodule=diff", "HEAD^")

        new_file = set(re.findall(r"CVE-[0-9]+-[0-9]+.json\n@@ -0,0", diff_result))
        edit_file = set(re.findall(r"CVE-[0-9]+-[0-9]+.json\n@@ -[1-9]", diff_result))

        new = [i[:-8] for i in new_file]
        edited = [i[:-6] for i in edit_file]

        json_format = {"new": new, "edited": edited}

        return json.dumps(json_format)